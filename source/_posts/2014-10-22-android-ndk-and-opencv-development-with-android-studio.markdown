---
layout: post
title: "Android NDK and OpenCV development with Android Studio"
date: 2014-10-22 09:51
comments: true
categories: mobile
---

最近打算将原来的XFace进行改进，开发上使用Android Studio作为新的开发环境，配上新的构建系统Gradle，应用上将修改原来的UI设计，内部代码也将有很大的变化，可能会用上ContentProvider和Service等略高级内容，算法上打算让应用扩展性增强以适应不同的算法，并结合强大的Android Studio和Gradle让这个项目变得更加丰富。说了一堆废话，言归正传，本文的重点是介绍如何在Android Studio中进行NDK开发(目前它还不完全支持NDK开发)，难点是NDK中还包含OpenCV的动态库。最后的最后，本文剩下部分将使用英文，因为它要成为我在StackOverflow上的处女答，么么哒 ~O(∩_∩)O~

####This post shows how to develop an Android NDK application with OpenCV included using Android Studio and Gradle. If you're working on migrating your original Eclipse Project to Android Studio, you may find this post is what exactly you want!

OK，Let's start! 

###Section 1:  Three things you must know

####1.Firstly, if you are not familiar with Android Studio and Gradle, you may find these links useful. (if you already know these well, skip this part)

①[Creating a new Project with Android Studio](http://developer.android.com/sdk/installing/create-project.html)

②[Building Your Project with Gradle](http://developer.android.com/sdk/installing/studio-build.html)

③[Gradle Plugin User Guide](http://tools.android.com/tech-docs/new-build-system/user-guide)  or you may want to read a Chinese commented version in my blog [here](http://hujiaweibujidao.github.io/blog/2014/10/13/gradle-plugin-user-guide-1/).

####2.Secondly, if your android ndk project is not that complicated(for example, having no opencv included), you may wanna see `ph0b`'s introduction here, it's quite a nice job with a video recorded! (you can also follow Section 2 in this post to get a simple Android NDK demo application)
 
[`ph0b`'s post: ANDROID STUDIO, GRADLE AND NDK INTEGRATION](http://ph0b.com/android-studio-gradle-and-ndk-integration/)

####3.Thirdly, if those above two do not meet your needs, then I think you may want to customize the Android.mk with Gradle in Android Studio. Thanks to `Gaku Ueda`, he had made a great job explaining how to achieve that goal. Actually I have found another nice solution without adding that many codes and also achieve that goal. :-) Find it out in the next sections.

[`Gaku Ueda`'s post: Using custom Android.mk with Gradle/Android Studio](http://blog.gaku.net/ndk/)

OK, I will cover all above and give another nice solution in the end, have fun!

###Section 2: A simple Android NDK demo application

This section shows creating a simple Android NDK demo application, if you already know, you can directly go the section 3.

1.Create a new Android project named `NDKDemo` with a blank Activity in AS(=Android Studio).

2.Give an `id` to the `TextView` in `activity_my.xml` such as `android:id="@+id/textview"`, next add these codes in `MyActivity`.

```
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_my);

    TextView textView = (TextView) findViewById(R.id.textview);
    textView.setText(hello());
}

static {
    System.loadLibrary("hello");
}

public native String hello();
```

3.New directory `jni` in folder `app/src/main`, then you have `java`, `jni` and `res` in this folder.

4.**This step is very important! You can add a external tool to run the `javah` command without typing that much codes! **

Open AS's `Preferences`, then find `External Tools` in `IDE Settings`, click `+` to add one tool with the following content. (Make sure you have add `JDK tools`  in your `system path`)

![image](http://hujiaweibujidao.github.io/images/javah_as.png)

As we can see, each time we right click on a `class file`, and run this tool, it will generate a `C head file` for us in the target folder `$ModuleFileDir$/src/main/jni` , in this case, it is `app/src/main/jni`. Try this on `MyActivity.java` file now! The console will print out a log like:

```
/usr/bin/javah -v -jni -d /Users/hujiawei/AndroidStudioProjects/NDKDemo/app/src/main/jni com.android.hacks.ndkdemo.MyActivity
[Creating file RegularFileObject[/Users/hujiawei/AndroidStudioProjects/NDKDemo/app/src/main/jni/com_android_hacks_ndkdemo_MyActivity.h]]
```

Then you get a `com_android_hacks_ndkdemo_MyActivity.h` file in `jni`  folder.

```
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_android_hacks_ndkdemo_MyActivity */

#ifndef _Included_com_android_hacks_ndkdemo_MyActivity
#define _Included_com_android_hacks_ndkdemo_MyActivity
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_android_hacks_ndkdemo_MyActivity
 * Method:    hello
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_android_hacks_ndkdemo_MyActivity_hello
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
```

5.Write a `C` implementation file named `main.c` in `jni` folder

```
#include <jni.h>
#include "com_android_hacks_ndkdemo_MyActivity.h"

JNIEXPORT jstring JNICALL Java_com_android_hacks_ndkdemo_MyActivity_hello
  (JNIEnv * env, jobject obj){
    return (*env)->NewStringUTF(env, "Hello from JNI");
  }
```

6.In the `build.gradle` under `app` module, add three lines configuring `ndk` in `defaultConfig`, you can find other configurations in [Gradle Plugin User Guide](http://tools.android.com/tech-docs/new-build-system/user-guide).

```
defaultConfig {
    applicationId "com.android.hacks.ndkdemo"
    minSdkVersion 16
    targetSdkVersion 20
    versionCode 1
    versionName "1.0"

    ndk{
        moduleName "hello"
    }
}
```

7.In order to let Gradle run `ndk-build` command (in some task, maybe `NdkCompile` task), we should configure the `ndk.dir` in `local.properties` file in Project root.

```
sdk.dir=/Volumes/hujiawei/Users/hujiawei/Android/android_sdk
ndk.dir=/Volumes/hujiawei/Users/hujiawei/Android/android_ndk
```

8.OK, everything is ready, click `Run` to give it a try, you will see the result like

![image](http://hujiaweibujidao.github.io/images/ndkdemo_ss.png)

All right, so what's happening inside?

**Since you have a `jni` folder, Gradle will consider it as a default `jni` folder(as before we use `Eclipse`). When building the `app`, it will run `ndk-build` command(since you have configured `ndk.dir`,  Gradle knows where to find this command) with a generated `Android.mk` file(locates in `app/build/intermediates/ndk/debug/Android.mk`), after compiling the native codes, it will generate the `libs` and `obj` into `app/build/intermediates/ndk/debug/`(see the figure below). Gradle will then package the `libs` into final `apk` file in folder `app/build/outputs/apk/app-debug.apk`(you can unarchive this file to check whether `libs` is contained)**

![image](http://hujiaweibujidao.github.io/images/ndkdemo_ndk.png)

![image](http://hujiaweibujidao.github.io/images/ndkdemo_apk.png)


###Secontion 3: Using OpenCV

If your project do not use OpenCV, then the section 2 is just enough. But what if you wanna use opencv to do other stuff? 

