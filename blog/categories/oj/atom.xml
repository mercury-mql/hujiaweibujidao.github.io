<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: oj | Hujiawei Bujidao]]></title>
  <link href="http://hujiaweibujidao.github.io/blog/categories/oj/atom.xml" rel="self"/>
  <link href="http://hujiaweibujidao.github.io/"/>
  <updated>2014-11-09T21:04:53+08:00</updated>
  <id>http://hujiaweibujidao.github.io/</id>
  <author>
    <name><![CDATA[hujiawei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BestCoder Round 17]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/11/09/bestcoder-round-17/"/>
    <updated>2014-11-09T20:16:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/11/09/bestcoder-round-17</id>
    <content type="html"><![CDATA[<p>最近终于确定了接下来要做什么，为了明年能够顺利拿到offer，我要从平时开始多做题了，多思考，不再接什么项目了。搜索了一番发现了一些好的比赛，比如CodeForces和BestCoder，哈哈哈，说练就练！</p>

<p>下面是昨天注册参加的BestCoder Round 17，总共四道题，只搞定了两道，后面那道还被别人hack掉了，当时想过可能会超过int的表示范围，但是时间不多就没多想了，菜鸟阶段暂时只能如此了。</p>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5100">Chessboard</a></p>

<p>第一题是说用大小为 k<em>1 的方砖来填充 n</em>n 的棋盘，问棋盘中最多能够有多少个方格能够被覆盖。</p>

<p><a href="http://www.matrix67.com/blog/archives/5900">Matrix67</a> 在他的博客中具体地介绍过这个问题的解法，其实就是两种情况，一个是可以直观地尽可能多地覆盖，另一个是以风车形式覆盖。</p>

<p>BestCoder题解：</p>

<p>首先，若n&lt;k，则棋盘连一个1×k的矩形都放不下，输出0。      <br />
我们只需要考虑n≥k的情况。将棋盘类似于黑白染色，按(i+j)模k划分等价类，给每个格子标一个号。标号之后，会注意到每条从左下到右上的斜线数字都是相同的，那么对于s×s的格子，其内部数字有且恰好有2s−1种，所以当s&lt;=k/2的时候，内部数字有floor(k2)*2−1&lt;k种，所以不能有更佳的方案。从而证明最优的方案一定是仅剩下一个s×s的正方形区域没有被覆盖到，其中s≤k/2。     <br />
而令l=n mod k之后，根据l大小的不同，可以构造出中心为l×l或(k−l)×(k−l)的风车形图案，又通过上面证明这个l（或k−l）就是之前的s，所以是最优的。所以令l=n mod k，如果l≤k2，最多可覆盖的格子数即为 <script type="math/tex">n^2−l^2</script>，否则为 <script type="math/tex">n^2−(k−l)^2</script>，显然这样的方案是可以构造出来的（风车形）。</p>

<p>```java</p>

<p>import java.util.Scanner;</p>

<p>//http://acm.hdu.edu.cn/showproblem.php?pid=5100</p>

<p>//思路，根据n%k和k/2的大小关系来判断如何覆盖</p>

<p>public class Cheeseboard17A {</p>

<pre><code>public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int t = scanner.nextInt();
    while (t-- &gt; 0) {
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        if (k &gt; n) {
            System.out.println("0");
            continue;
        }
        int m = n % k;
        if (m &gt; k / 2) {
            System.out.println(n * n - (k - m) * (k - m));
        } else {
            System.out.println(n * n - m * m);
        }
    }
}
</code></pre>

<p>}</p>

<p>```</p>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5101">Select</a></p>

<p>题目大意就是给定一些集合，选择两个来自不同集合的数，加和大于k，问有多少种选择方案。</p>

<p>思路：答案=从所有数中选择的两个加和大于k的数的方案数-在同一个集合中选择的两个加和大于k的数的方案数，而对于同一个集合中选择的两个加和大于k的方案数是可以直接排序然后利用单调性快速统计出来的。</p>

<p>实现：将满足条件的所有组合减去每个班级中满足条件的所有组合，求解时可以将所有学生视为一个新的班，先对所有班级的学生IQ值排序，某个班满足条件的组合数目类似二分策略的插入排序，就是要找到数组的某个子序列中大于等于某个数的所有数字的个数。</p>

<p>```
import java.util.Arrays;
import java.util.Scanner;</p>

<p>//http://acm.hdu.edu.cn/showproblem.php?pid=5101</p>

<p>public class Select17B2 {</p>

<pre><code>public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int t = scanner.nextInt();
    while (t-- &gt; 0) {
        int n = scanner.nextInt();
        int s = scanner.nextInt();
        int[][] vs = new int[n][];
        int allm = 0;
        for (int i = 0; i &lt; n; i++) {//获取数据
            int m = scanner.nextInt();
            allm += m;
            vs[i] = new int[m];
            for (int j = 0; j &lt; m; j++) {
                vs[i][j] = scanner.nextInt();
            }
        }
        //排序每个班级
        for (int i = 0; i &lt; n; i++) {
            Arrays.sort(vs[i]);
        }
        //排序所有学生
        int offset = 0;
        int[] all = new int[allm];
        for (int i = 0; i &lt; n; i++) {
            System.arraycopy(vs[i], 0, all, offset, vs[i].length);
            offset += vs[i].length;
        }
        Arrays.sort(all);

        long sum = getCount(all, s);
        //System.out.println(sum);
        for (int i = 0; i &lt; n; i++) {
            sum -= getCount(vs[i], s);
        }
        System.out.println(sum);
    }
}

//得到一个数组中满足两个元素之和大于s的组合数
private static long getCount(int[] all, int s) {
    long res = 0;
    for (int i = 0, l = all.length; i &lt; l; i++) {
        if (all[i] &gt;= s) {//这个数比s+1更大，那么后面的数都可以和它组合
            res += l - i - 1;//
        } else {//否则的话找到从后面哪个数字开始可以和它进行组合
            int r = s + 1 - all[i];
            res += bs(all, r, i + 1, l-1);
        }
    }
    return res;
}

//得到一个数组从from到end之间满足大于等于r的数字的个数 [二分查找]
private static int bs(int[] vs, int r, int from, int end) {
    int len = end - from + 1;//
    if (len &lt;= 0) return 0;
    int left = from, right = end, mid = 0;
    while (left &lt;= right) {
        mid = (left + right) / 2;
        if (r &lt;= vs[mid]) {
            right = mid - 1;
        } else if (r &gt; vs[mid]) {
            left = mid + 1;
        }
    }
    return end - left + 1;
}
</code></pre>

<p>}</p>

<p>```</p>

<p>后面的等我写好了再附上，嘿嘿嘿。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google APAC 2015 University Graduates Test Round D]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/11/09/google-apac-2015-university-graduates-test-round-d/"/>
    <updated>2014-11-09T19:09:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/11/09/google-apac-2015-university-graduates-test-round-d</id>
    <content type="html"><![CDATA[<p>前段时间才知道的Google APAC比赛，于是乎注册了今天下午的比赛，Round D，总共四道题，只过了两道，完了之后现在过了三道。这三道都不难只是觉得很奇怪，不熟悉这种比赛模式，它是让你下载输入文件，然后你在给定时间内提交输出文件和源程序即可，对于每道题目都有一个小测试集和大测试集。我以为一般大测试集肯定不好过的，但是纳闷的是其实也很好过，所以本来第二题暴力很简单就能过，我以为要优化，写了半天还是错了，于是在比赛前暴力了一下，结果竟然过了，哎，请理解俺这个菜鸟。</p>

<p>废话不多说了，下面是前三题的解题报告 </p>

<p>[我的代码总是冗长冗长的，可读性高，但是花的时间总是比别人长，所以我真心不适合比赛，汗⊙﹏⊙]</p>

<h3 id="problem-a-cube-ivhttpscodegooglecomcodejamcontest6214486dashboardsp0"><a href="https://code.google.com/codejam/contest/6214486/dashboard#s=p0">Problem A. Cube IV</a></h3>

<p>问题A是说在S*S个方格中，每个方格代表一个房间，房间有一个房间编号，从1到S的平方，每个里面有一个人，这个人可以从一个房间A移动到另一个房间B，但是必须满足房间B的编号比房间A的编号大1才行，问哪个房间的人能够移动的距离最远，最远的距离又是多少？如果两个人能够移动的距离相同，输出房间号小的那个人。</p>

<p>思路：自始至终维护结果r和d，从房间号最大的那个房间开始DFS，遇到房间号小1的房间就进入，一直下去直到不能移动了，修改r和d的值，然后从比上次停下来的房间小1的房间开始继续DFS，如果他移动的距离更多的话，那么就修改d和r即可，一直下去就能得到最终解。</p>

<p>```java
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.util.Scanner;</p>

<p>//https://code.google.com/codejam/contest/6214486/dashboard#s=p0</p>

<p>public class ProblemA {</p>

<pre><code>private static int s;
private static int[][] p;

public static void main(String[] args) throws Exception {
    PrintStream out = new PrintStream(new BufferedOutputStream(new FileOutputStream("data/out.txt")));
    System.setOut(out);
    System.setErr(out);
    Scanner scanner = new Scanner(new FileInputStream("data/in.txt"));
    int t = scanner.nextInt();
    int c = 1;
    while (t-- &gt; 0) {
        s = scanner.nextInt();
        p = new int[s][s];
        for (int i = 0; i &lt; s; i++) {
            for (int j = 0; j &lt; s; j++) {
                p[i][j] = scanner.nextInt();
            }
        }
        System.out.print("Case #" + c + ": ");
        solve();
        c++;
    }
    out.flush();
    out.close();
}

private static void solve() {
    int r = 0, d = 1, max = s * s;
    while (max &gt; 0 &amp;&amp; max &gt;= d) {
        Point maxp = findPoint(max);
        Result result = new Result(1, 1);
        dfs(maxp, result);
        if (result.d &gt;= d) {
            r = result.r;
            d = result.d;
        }
        max = max - result.d;//
    }
    System.out.println(r + " " + d);
}

private static void dfs(Point current, Result result) {
    //left
    Point left = current.left();
    if (left != null &amp;&amp; p[left.x][left.y] == p[current.x][current.y] - 1) {
        result.r = p[left.x][left.y];
        result.d++;
        dfs(left, result);
        return;
    }
    //right
    Point right = current.right();
    if (right != null &amp;&amp; p[right.x][right.y] == p[current.x][current.y] - 1) {
        result.r = p[right.x][right.y];
        result.d++;
        dfs(right, result);
        return;
    }
    //up
    Point up = current.up();
    if (up != null &amp;&amp; p[up.x][up.y] == p[current.x][current.y] - 1) {
        result.r = p[up.x][up.y];
        result.d++;
        dfs(up, result);
        return;
    }
    //down
    Point down = current.down();
    if (down != null &amp;&amp; p[down.x][down.y] == p[current.x][current.y] - 1) {
        result.r = p[down.x][down.y];
        result.d++;
        dfs(down, result);
        return;
    }
}

private static Point findPoint(int max) {
    for (int i = 0; i &lt; s; i++) {
        for (int j = 0; j &lt; s; j++) {
            if (p[i][j] == max) {
                return new Point(s, i, j);
            }
        }
    }
    return null;
}
</code></pre>

<p>}</p>

<p>class Point {</p>

<pre><code>int s;
int x;
int y;

Point(int s, int x, int y) {
    this.s = s;
    this.x = x;
    this.y = y;
}

Point up() {
    if (x - 1 &gt;= 0) return new Point(this.s, this.x - 1, this.y);
    return null;
}

Point down() {
    if (x + 1 &lt; s) return new Point(this.s, this.x + 1, this.y);
    return null;
}

Point left() {
    if (y - 1 &gt;= 0) return new Point(this.s, this.x, this.y - 1);
    return null;
}

Point right() {
    if (y + 1 &lt; s) return new Point(this.s, this.x, this.y + 1);
    return null;
} }
</code></pre>

<p>class Result {</p>

<pre><code>int r;
int d;

Result(int r, int d) {
    this.r = r;
    this.d = d;
} }
</code></pre>

<p>```</p>

<h3 id="problem-b-gbus-counthttpscodegooglecomcodejamcontest6214486dashboardsp1"><a href="https://code.google.com/codejam/contest/6214486/dashboard#s=p1">Problem B. GBus count</a></h3>

<p>问题B是说在一些城市之间有一些公交车，给你这些车的起点和终点的数据，假设某辆公交车是从1到10，那么城市1、城市2、城市3等一直到城市10都被经过了，现在要求的是有多少辆车经过了某个城市？</p>

<p>思路：这简直不能叫做思路！纯暴力就行了！遍历所有公交车的线路，统计判断该城市是否在这个线路上即可。这样就已经可以过了！比赛时我想了写优化，大致思路是假设城市编号为c，公交车的线路为 <script type="math/tex">a_{i}</script> 和 <script type="math/tex">b_{i}</script>，首先对所有公交线路按照 <script type="math/tex">a_{i}</script> 排序，保留那些 <script type="math/tex">% &lt;![CDATA[
a_{i}<=c %]]&gt;</script> 的线路，然后对这些线路按照 <script type="math/tex">b_{i}</script> 排序，保留那些 <script type="math/tex">{b_{i}>=c}</script> 的线路，最后保留下来的线路的个数就是最终的解。[但是我的代码有问题，即下面的<code>solve</code>方法，提交了几次都报错]</p>

<p>```
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.util.*;</p>

<p>//https://code.google.com/codejam/contest/6214486/dashboard#s=p1</p>

<p>public class ProblemB {</p>

<pre><code>private static int n, p;
private static ArrayList&lt;Bus&gt; buses;
private static ArrayList&lt;Integer&gt; cities;

public static void main(String[] args) throws Exception {
    PrintStream out = new PrintStream(new BufferedOutputStream(new FileOutputStream("data/out.txt")));
    System.setOut(out);
    System.setErr(out);
    Scanner scanner = new Scanner(new FileInputStream("data/in.txt"));

    int t = scanner.nextInt();
    int c = 1;
    while (t-- &gt; 0) {
        buses = new ArrayList&lt;Bus&gt;();
        cities = new ArrayList&lt;Integer&gt;();
        n = scanner.nextInt();
        for (int i = 0; i &lt; n; i++) {
            buses.add(new Bus(scanner.nextInt(), scanner.nextInt()));
        }
        p = scanner.nextInt();
        for (int i = 0; i &lt; p; i++) {
            cities.add(scanner.nextInt());
        }
        System.out.print("Case #" + c + ": ");
        solve2();
        System.out.println();
        c++;
    }

    out.flush();
    out.close();
}

//暴力解决
private static void solve2() {
    int key, sum;
    for (int i = 0; i &lt; p; i++) {
        key = cities.get(i);
        sum = 0;
        for (Bus bus : buses) {
            if (key &gt;= bus.x &amp;&amp; key &lt;= bus.y) {
                sum++;
            }
        }
        System.out.print(sum + " ");
    }
}

//非暴力解决，但是仍然存在问题
private static void solve() {
    Comparator&lt;Bus&gt; cf = new Comparator&lt;Bus&gt;() {
        @Override
        public int compare(Bus o1, Bus o2) {
            if (o1.x &gt; o2.x) {
                return 1;
            } else if (o1.x &lt; o2.x) {
                return -1;
            }
            return 0;
        }
    };
    Comparator&lt;Bus&gt; ct = new Comparator&lt;Bus&gt;() {
        @Override
        public int compare(Bus o1, Bus o2) {
            if (o1.y &gt; o2.y) {
                return 1;
            } else if (o1.y &lt; o2.y) {
                return -1;
            }
            return 0;
        }
    };

    Collections.sort(buses, cf);

    int left, right, key;
    for (int i = 0; i &lt; p; i++) {
        key = cities.get(i);
        left = bs_f(buses, key);//从left开始都是大于key的数字
        List&lt;Bus&gt; flist = buses.subList(0, left);//left=0, size=0
        if (flist.size() &gt; 0) {
            Collections.sort(flist, ct);
            right = bs_t(flist, key);//从right开始都是大于等于key的数字
            List&lt;Bus&gt; tlist = flist.subList(right, flist.size());
            System.out.print(tlist.size() + " ");
        } else {
            System.out.print("0 ");
        }
    }
}

private static int bs_f(List&lt;Bus&gt; lbus, int r) {
    int len = lbus.size();
    int left = 0, right = len - 1, mid = 0;
    while (left &lt;= right) {
        mid = (left + right) / 2;
        if (r &lt; lbus.get(mid).x) {
            right = mid - 1;
        } else if (r &gt;= lbus.get(mid).x) {
            left = mid + 1;
        }
    }
    return left;
}

private static int bs_t(List&lt;Bus&gt; lbus, int r) {
    int len = lbus.size();
    int left = 0, right = len - 1, mid = 0;
    while (left &lt;= right) {
        mid = (left + right) / 2;
        if (r &lt;= lbus.get(mid).y) {
            right = mid - 1;
        } else if (r &gt; lbus.get(mid).y) {
            left = mid + 1;
        }
    }
    return left;
}
</code></pre>

<p>}</p>

<p>class Bus {</p>

<pre><code>int x;
int y;

Bus(int x, int y) {
    this.x = x;
    this.y = y;
} }
</code></pre>

<p>```</p>

<h3 id="problem-c-sort-a-scrambled-itineraryhttpscodegooglecomcodejamcontest6214486dashboardsp2"><a href="https://code.google.com/codejam/contest/6214486/dashboard#s=p2">Problem C. Sort a scrambled itinerary</a></h3>

<p>问题C是说给你一些航班的信息，包括起点城市和终点城市，但是顺序乱了，让你来确定这些航班整合起来最后是从哪里到哪里之后又到了哪里。</p>

<p>思路：这题很简单，起点是入度为0的点，终点是出度为0的点，一个while循环就能搞定，就这样简单的思路这道题目就可以过。</p>

<p>```
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.util.*;</p>

<p>//https://code.google.com/codejam/contest/6214486/dashboard#s=p2</p>

<p>public class ProblemC {</p>

<pre><code>private static Map&lt;String, String&gt; flights;
private static Map&lt;String, City&gt; citymap;

public static void main(String[] args) throws Exception {
    PrintStream out = new PrintStream(new BufferedOutputStream(new FileOutputStream("data/out.txt")));
    System.setOut(out);
    System.setErr(out);
    Scanner scanner = new Scanner(new FileInputStream("data/in.txt"));

    int t = scanner.nextInt();
    int c = 1;
    while (t-- &gt; 0) {
        System.out.print("Case #" + c + ": ");
        flights = new HashMap&lt;String, String&gt;();
        citymap = new HashMap&lt;String, City&gt;();
        int p = scanner.nextInt();
        String from, to;
        City cf, ct;
        for (int i = 0; i &lt; p; i++) {
            from = scanner.next();
            to = scanner.next();

            if (citymap.containsKey(from)) {
                cf = citymap.get(from);
            } else {
                cf = new City();
                citymap.put(from, cf);
            }
            cf.name = from;
            cf.out = 1;

            if (citymap.containsKey(to)) {
                ct = citymap.get(to);
            } else {
                ct = new City();
                citymap.put(to, ct);
            }
            ct.name = to;
            ct.in = 1;

            flights.put(from, to);
        }
        solve();
        c++;
        System.out.println();
    }

    out.flush();
    out.close();
}

private static void solve() {
    String from = null;
    Set&lt;Map.Entry&lt;String, City&gt;&gt; entries = citymap.entrySet();
    for (Map.Entry&lt;String, City&gt; entry : entries) {
        //System.out.println("name=" + entry.getValue().name + " in=" + entry.getValue().in + " out=" + entry.getValue().out);
        if (entry.getValue().in == 0) {
            from = entry.getKey();
            break;
        }
    }

    String next;
    String current = from;
    while (current != null &amp;&amp; flights.containsKey(current)) {
        next = flights.get(current);
        System.out.print(citymap.get(current).name + "-" + citymap.get(next).name + " ");
        current = next;
    }
}
</code></pre>

<p>}</p>

<p>class City {</p>

<pre><code>String name;
int in = 0;
int out = 0;
</code></pre>

<p>}</p>

<p>```</p>

<p>问题D暂时没看，有空了再倒腾一下！ :-)</p>

]]></content>
  </entry>
  
</feed>
